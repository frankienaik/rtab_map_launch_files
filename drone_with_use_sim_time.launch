
<launch>
  
  <!-- this launch coed uses icp_odometry for its odometry -->
	
  <!-- RTAB-Map parameters can be found in https://github.com/introlab/rtabmap/blob/master/corelib/include/rtabmap/core/Parameters.h
		and http://wiki.ros.org/rtabmap_ros -->
	
  <!-- Choose visualization -->
  <arg name="rviz" default="true" /> <!-- use RVIZ -->
  <arg name="rtabmapviz" default="false" /> <!-- use RTAB-MapVIZ -->
	
  <!-- sim time for convenience, if playing a rosbag -->
  <arg name="use_sim_time"            default="false"/>
  <param if="$(arg use_sim_time)" name="use_sim_time" value="true"/>
  
  <!-- Creating the transform tree that combines the LIDAR and the Realsense branches -->
  <!-- only needs to use the tf when use_sim_time is false -->
	
  <!-- tf to link the base_footprint to the laser -->
  <node unless="$(arg use_sim_time)" pkg="tf" type="static_transform_publisher" name="base_footprint_to_laser" 
    args="0.0 0.0 0.0 0.0 0.0 0.0 /base_footprint /laser 100" />

  <!-- tf to link the base_footprint to the camera -->
  <node unless="$(arg use_sim_time)" pkg="tf" type="static_transform_publisher" name="base_footprint_to_camera_link" 
    args="0.0 0.0 1.0 3.14159 0.0 0.0 /base_footprint /camera_link 100" />

  
  <!-- use rtabmap's icp odometry to generate odometry for us -->
  <node pkg="rtabmap_ros" type="icp_odometry" name="icp_odometry" output="screen" >

     <remap from="scan"      to="/scan"/>

     <remap from="odom"      to="/scanmatch_odom"/> 
     <remap from="odom_info"      to="/rtabmap/odom_info"/> <!-- Odometry info. Required if parameter subscribe_odom_info is true. -->
	  
     <param name="frame_id"        type="string" value="base_footprint"/>   <!-- The frame attached to the mobile base. -->
     
     <remap from="rgb/image"       to="/camera/color/image_raw"/> <!-- RGB/Mono image. Should be rectified when subscribe_depth is true. Not required if parameter subscribe_stereo is true (use left/image_rect instead). -->
     <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/> <!-- Registered depth image. -->
     <remap from="rgb/camera_info" to="/camera/color/camera_info"/> <!-- RGB camera metadata. Not required if parameter subscribe_stereo is true (use left/camera_info instead). -->
  	
<!--
     <param name="rgb/image_transport"   type="string" value="compressed"/>
     <param name="depth/image_transport" type="string" value="compressedDepth"/>  
-->	  
     <!-- ICP parameters -->
     <param name="Icp/PointToPlane"  type="string" value="true"/> <!-- "Use point to plane ICP." -->
     <param name="Icp/VoxelSize"     type="string" value="0.05"/> <!-- "Uniform sampling voxel size (0=disabled)." -->
     <param name="Icp/Epsilon"       type="string" value="0.001"/> <!-- "Set the transformation epsilon (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution." -->
     <param name="Icp/PointToPlaneK"  type="string" value="5"/> <!-- "Number of neighbors to compute normals for point to plane if the cloud doesn't have already normals." -->
     <param name="Icp/PointToPlaneRadius"  type="string" value="0.3"/> <!-- "Search radius to compute normals for point to plane if the cloud doesn't have already normals." -->
     <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.1"/> <!-- "Max distance for point correspondences." -->
     <param name="Icp/PM"             type="string" value="true"/> <!-- use libpointmatcher to handle PointToPlane with 2d scans-->
     <param name="Icp/PMOutlierRatio" type="string" value="0.95"/> <!-- "TrimmedDistOutlierFilter/ratio: For convenience when configuration file is not set. For kinect-like point cloud, use 0.65." -->
	  
     <!-- Odometry parameters -->
     <param name="Odom/Strategy"        type="string" value="0"/> <!-- "0=Frame-to-Map (F2M) 1=Frame-to-Frame (F2F) 2=Fovis 3=viso2 4=DVO-SLAM 5=ORB_SLAM2 6=OKVIS 7=LOAM 8=MSCKF_VIO" -->
     <param name="Odom/GuessMotion"     type="string" value="true"/> <!-- "Guess next transformation from the last motion computed." -->
     <param name="Odom/ResetCountdown"  type="string" value="0"/> <!-- "Automatically reset odometry after X consecutive images on which odometry cannot be computed (value=0 disables auto-reset)." -->
     <param name="Odom/ScanKeyFrameThr"  type="string" value="0.9"/> <!-- [Geometry] Create a new keyframe when the number of ICP inliers drops under this ratio of points in last frame's scan. Setting the value to 0 means that a keyframe is created for each processed frame." -->
  </node>

  <group ns="rtabmap">
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">

      <!-- change this to fit the output from your Realsense camera -->
      <remap from="rgb/image"       to="/camera/color/image_raw"/> <!-- RGB/Mono image. Should be rectified when subscribe_depth is true. Not required if parameter subscribe_stereo is true (use left/image_rect instead). -->
      <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/> <!-- Registered depth image. -->
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/> <!-- RGB camera metadata. Not required if parameter subscribe_stereo is true (use left/camera_info instead). -->
      
<!--
      <param name="rgb/image_transport"   type="string" value="compressed"/>
      <param name="depth/image_transport" type="string" value="compressedDepth"/>
-->
      <remap from="rgbd_image"      to="rgbd_image"/> <!-- RGB-D synchronized image, only when subscribe_rgbd is true. -->

	    
    <!-- Should be true for not synchronized camera topics 
           (e.g., false for kinectv2, zed, realsense, true for xtion, kinect360)-->
      <param name="approx_sync"       value="true"/>  <!-- Use approximate time synchronization of input messages. If false, note that the odometry input must have also exactly the same timestamps than the input images. -->
    </node>
    
    <!-- SLAM -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
      <param name="frame_id" type="string" value="base_footprint"/>
	
      <param name="subscribe_depth" type="bool" value="true"/> <!-- Subscribe to depth image -->
      <param name="subscribe_rgbd"  type="bool" value="true"/> <!-- Subsribe to rgbd_image topic. -->
      <param name="subscribe_scan"  type="bool" value="true"/> <!-- Subscribe to laser scan -->
			
      <param name="wait_for_transform" type="bool" value="true"/> <!-- Wait duration for transform when a tf transform is not still available. -->
      <remap from="rgb/image"       to="/camera/color/image_raw"/> <!-- RGB/Mono image. Should be rectified when subscribe_depth is true. Not required if parameter subscribe_stereo is true (use left/image_rect instead). -->
      <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/> <!-- Registered depth image. -->
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/> <!-- RGB camera metadata. Not required if parameter subscribe_stereo is true (use left/camera_info instead). -->
			
<!--
      <param name="rgb/image_transport"   type="string" value="compressed"/>	    
      <param name="depth/image_transport" type="string" value="compressedDepth"/>  
-->			
      <param name="odom_frame_id"            type="string" value="odom"/> <!-- The frame attached to odometry. If empty, rtabmap will subscribe to odom topic to get odometry. If set, odometry is got from tf (in this case, a covariance of 1 is used). -->
      <param name="odom_tf_linear_variance"  type="double" value="0.001"/>  
      <param name="odom_tf_angular_variance" type="double" value="0.001"/>
      
      <remap from="scan" to="/scan"/>

      <remap from="rgbd_image" to="rgbd_image"/> <!-- RGB-D synchronized image, only when subscribe_rgbd is true. -->

      <param name="queue_size" type="int" value="10"/> <!-- Size of message queue for each synchronized topic. -->

      <remap from="odom" to="/scanmatch_odom"/>
      <param name="subscribe_odom_info" type="bool" value="true"/> <!-- Subscribe to odometry info messages -->
	
      <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
      <param name="Reg/Strategy"       type="string" value="1"/>    <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
      <param name="Reg/Force3DoF"      type="string" value="true"/> <!-- "Force 3 degrees-of-freedom transform (3Dof: x,y and yaw). Parameters z, roll and pitch will be set to 0." -->
      <param name="RGBD/ProximityBySpace"      type="string" value="false"/> <!-- "Detection over locations (in Working Memory) near in space." -->
      
      <param name="RGBD/NeighborLinkRefining" type="string" value="true"/> <!-- uFormat("When a new node is added to the graph, the transformation of its neighbor link to the previous node is refined using registration approach selected (%s).", kRegStrategy().c_str()) -->
      <param name="RGBD/AngularUpdate"        type="string" value="0.01"/> <!-- "Minimum angular displacement (rad) to update the map. Rehearsal is done prior to this, so weights are still updated." -->
      <param name="RGBD/LinearUpdate"         type="string" value="0.01"/> <!-- "Minimum linear displacement (m) to update the map. Rehearsal is done prior to this, so weights are still updated." -->
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/> <!-- "Optimize graph from the newest node. If false, the graph is optimized from the oldest node of the current graph (this adds an overhead computation to detect to oldest node of the current graph, but it can be useful to preserve the map referential from the oldest node). Warning when set to false: when some nodes are transferred, the first referential of the local map may change, resulting in momentary changes in robot/map position (which are annoying in teleoperation)." -->
      <param name="Grid/FromDepth"            type="string" value="false"/> <!-- "Create occupancy grid from depth image(s), otherwise it is created from laser scan." -->
    	  
    </node>			
    
    <!-- Visualisation RTAB-Map -->
    <!-- uses rgbd_gui.ini -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
      <param name="subscribe_rgbd"      type="bool" value="false"/> <!-- Subsribe to rgbd_image topic. -->
      <param name="subscribe_laserScan" type="bool" value="true"/>
      <param name="frame_id"            type="string" value="base_footprint"/>

      <remap from="scan"            to="/scan"/>
			
      <param name="odom_frame_id" type="string" value="hector_map"/> <!-- The frame attached to odometry. If empty, rtabmap will subscribe to odom topic to get odometry. If set, odometry is got from tf (in this case, a covariance of 1 is used). -->
      <remap from="odom" to="/scanmatch_odom"/>
      <param name="subscribe_odom_info" type="bool" value="true"/> <!-- Subscribe to odometry info messages -->
    </node>
  
  </group>
  
  <!-- Visualisation RVIZ -->
  <!-- uses our own .rviz file to automatically change certain parameters -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros)/launch/config/demo_frankie_mapping.rviz" output="screen"/>
   <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="rgbd_image"      to="/rtabmap/rgbd_image"/>
    <remap from="cloud"           to="voxel_cloud" /> <!-- Generated RGB point cloud. -->

    <param name="voxel_size" type="double" value="0.01"/> <!-- Voxel size (m) of the generated cloud. Set 0.0 to deactivate voxel filtering. -->
  </node>
</launch>
